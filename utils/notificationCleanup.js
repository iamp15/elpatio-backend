/**
 * Script de limpieza autom√°tica de notificaciones antiguas
 * Elimina notificaciones con m√°s de X d√≠as de antig√ºedad
 * Se ejecuta autom√°ticamente seg√∫n configuraci√≥n de cron
 */

const cron = require("node-cron");
const notificacionesController = require("../controllers/notificacionesController");

// Variables de entorno
const CLEANUP_ENABLED =
  process.env.NOTIFICATIONS_CLEANUP_ENABLED === "true" || true;
const CLEANUP_DAYS = parseInt(process.env.NOTIFICATIONS_CLEANUP_DAYS) || 7;
const CLEANUP_CRON = process.env.NOTIFICATIONS_CLEANUP_CRON || "0 0 1 * *"; // Primer d√≠a del mes a medianoche

/**
 * Iniciar tarea de limpieza autom√°tica
 */
function iniciarLimpiezaAutomatica() {
  if (!CLEANUP_ENABLED) {
    console.log("üßπ Limpieza autom√°tica de notificaciones: DESHABILITADA");
    return;
  }

  console.log("üßπ Limpieza autom√°tica de notificaciones: HABILITADA");
  console.log(`üìÖ Cron expression: ${CLEANUP_CRON}`);
  console.log(`üóìÔ∏è D√≠as de retenci√≥n: ${CLEANUP_DAYS}`);

  // Validar expresi√≥n cron
  if (!cron.validate(CLEANUP_CRON)) {
    console.error(
      `‚ùå Expresi√≥n cron inv√°lida: ${CLEANUP_CRON}. Usando valor por defecto.`
    );
    return;
  }

  // Programar tarea
  const tarea = cron.schedule(
    CLEANUP_CRON,
    async () => {
      console.log("\nüßπ ===== INICIANDO LIMPIEZA DE NOTIFICACIONES =====");
      console.log(`üìÖ Fecha: ${new Date().toLocaleString("es-ES")}`);

      try {
        const resultado =
          await notificacionesController.limpiarNotificacionesAntiguas(
            CLEANUP_DAYS
          );

        if (resultado) {
          console.log(
            `‚úÖ Limpieza completada: ${resultado.eliminadas} notificaciones eliminadas`
          );
        } else {
          console.log("‚ö†Ô∏è La limpieza no retorn√≥ resultados");
        }
      } catch (error) {
        console.error("‚ùå Error en limpieza autom√°tica:", error.message);
      }

      console.log("üßπ ===== LIMPIEZA FINALIZADA =====\n");
    },
    {
      scheduled: true,
      timezone: "America/Caracas", // Ajustar seg√∫n la zona horaria del proyecto
    }
  );

  console.log("‚úÖ Tarea de limpieza programada correctamente");

  return tarea;
}

/**
 * Ejecutar limpieza manual
 * √ötil para testing o ejecuci√≥n manual
 */
async function ejecutarLimpiezaManual(dias = CLEANUP_DAYS) {
  console.log("\nüßπ ===== LIMPIEZA MANUAL DE NOTIFICACIONES =====");
  console.log(`üìÖ Fecha: ${new Date().toLocaleString("es-ES")}`);
  console.log(`üóìÔ∏è Eliminando notificaciones con m√°s de ${dias} d√≠as`);

  try {
    const resultado =
      await notificacionesController.limpiarNotificacionesAntiguas(dias);

    if (resultado) {
      console.log(
        `‚úÖ Limpieza completada: ${resultado.eliminadas} notificaciones eliminadas`
      );
      return resultado;
    } else {
      console.log("‚ö†Ô∏è La limpieza no retorn√≥ resultados");
      return null;
    }
  } catch (error) {
    console.error("‚ùå Error en limpieza manual:", error.message);
    return null;
  }
}

module.exports = {
  iniciarLimpiezaAutomatica,
  ejecutarLimpiezaManual,
};
