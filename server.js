const app = require("./app");
const connectDB = require("./config/db");
const mongoose = require("mongoose");
const socketManager = require("./websocket/socketManager");
const { iniciarLimpiezaAutomatica } = require("./utils/notificationCleanup");

const PORT = process.env.PORT || 3000;

// Variable para el servidor (declarada en scope superior)
let server;

// Funci√≥n para shutdown graceful
const gracefulShutdown = (signal) => {
  console.log(`\nüõë Recibida se√±al ${signal}. Iniciando shutdown graceful...`);

  if (!server) {
    console.log("‚ö†Ô∏è Servidor no inicializado, saliendo directamente...");
    process.exit(0);
    return;
  }

  server.close(() => {
    console.log("‚úÖ Servidor HTTP cerrado");

    mongoose.connection.close(false, () => {
      console.log("‚úÖ Conexi√≥n MongoDB cerrada");
      process.exit(0);
    });
  });

  // Forzar cierre despu√©s de 10 segundos
  setTimeout(() => {
    console.error("‚ùå Forzando cierre del servidor");
    process.exit(1);
  }, 10000);
};

// Manejar se√±ales de terminaci√≥n
process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));
process.on("SIGINT", () => gracefulShutdown("SIGINT"));

// Manejar errores no capturados
process.on("uncaughtException", (err) => {
  console.error("‚ùå Uncaught Exception:", err);
  gracefulShutdown("UNCAUGHT_EXCEPTION");
});

process.on("unhandledRejection", (reason, promise) => {
  console.error("‚ùå Unhandled Rejection at:", promise, "reason:", reason);
  gracefulShutdown("UNHANDLED_REJECTION");
});

// Iniciar servidor
connectDB()
  .then(() => {
    server = app.listen(PORT, "0.0.0.0", () => {
      console.log(
        `üöÄ Servidor El Patio Backend v${app.APP_VERSION} [ALPHA] corriendo en el puerto ${PORT}`
      );
      console.log(
        `üìä Health check disponible en: http://localhost:${PORT}/health`
      );
    });

    // Configurar timeout del servidor
    server.keepAliveTimeout = 65000;
    server.headersTimeout = 66000;

    // Inicializar WebSocket
    socketManager.initialize(server);

    // Hacer disponible el socketManager globalmente
    app.set("socketManager", socketManager);

    // Endpoint para estad√≠sticas de WebSocket
    app.get("/api/websocket/stats", (req, res) => {
      res.json(socketManager.getStats());
    });

    // Iniciar limpieza autom√°tica de notificaciones
    try {
      iniciarLimpiezaAutomatica();
    } catch (error) {
      console.error(
        "‚ö†Ô∏è Error iniciando limpieza autom√°tica de notificaciones:",
        error.message
      );
      console.log("üí° Aseg√∫rate de instalar node-cron: npm install node-cron");
    }
  })
  .catch((error) => {
    console.error("‚ùå Error al iniciar servidor:", error);
    process.exit(1);
  });
